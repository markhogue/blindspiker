# bad ones
example_df <- get_data(spike_data = example_spike_data,
lab_data = bad_lab_data)
# good ones
example_df <- get_data(spike_data = example_spike_data,
lab_data = example_lab_data)
#' @param df data frame with all data needed as described in `get_data`.
#'
#' @examples
#' example_spike_data <- system.file('extdata', 'spikevals.csv', package = 'blindspiker')
#' example_lab_data <- system.file('extdata', 'labvals.csv', package = 'blindspiker')
#' example_df <- get_data(spike_data = example_spike_data, lab_data = example_lab_data)
#' table_false(df = example_df)
#'
#' @export
#'
table_false <- function(select_analyte,
df = bs_df) {
df <- example_df %>% dplyr::filter(analyte == select_analyte)
# false postive
# The false positive rate is computed as the number of false positives divided
# by the number of false positives and true negatives. True negatives are
# computed first
n_true_neg <- df %>%
dplyr::filter(analyte == select_analyte) %>%
dplyr::filter(err_type == "no_err_cat") %>%
dplyr::filter(result < det_lvl) %>%
dplyr::count(.) %>%
as.numeric()  #
n_false_neg <- df %>%
dplyr::filter(analyte == select_analyte) %>%
dplyr::filter(err_type == "false_neg") %>%
dplyr::count(.) %>%
as.numeric()  #
n_false_pos <-  df %>%
dplyr::filter(analyte == select_analyte) %>%
dplyr::filter(err_type == "false_pos") %>%
dplyr::count(.) %>%
as.numeric()
n_lab_results <- df %>%
dplyr::filter(analyte == select_analyte) %>%
dplyr::filter(!is.na(result)) %>%
dplyr::count(.) %>%
as.numeric()
n_err_free <-  df %>%
dplyr::filter(analyte == select_analyte) %>%
dplyr::filter(!is.na(result)) %>%
dplyr::filter(err_type == "no_err_cat") %>%
dplyr::count(.) %>%
as.numeric()
# false positive rate
f_pos <-
binGroup::binCI(
n = n_false_pos + n_true_neg,
y = n_false_pos,
conf.level = 0.95,
alternative = "two.sided",
method = "CP")
# false negative rate
f_neg <-
binGroup::binCI(
n = length(df$sample_ID),
y = n_false_neg,
conf.level = 0.95,
alternative = "two.sided",
method = "CP")
# total error rate
f_all <- binGroup::binCI(n = n_lab_results,
y = n_lab_results - n_err_free, #either error
conf.level = 0.95,
alternative = "two.sided",
method = "CP")
f_tbl <- data.frame("error_type" =
c("false postive", "false negative", "either_error"),
"low" =
c(f_pos$conf.int[1], f_neg$conf.int[1], f_all$conf.int[1]),
"estimate" =
c(f_pos$estimate, f_neg$estimate, f_all$estimate),
"high" =
c(f_pos$conf.int[2], f_neg$conf.int[2], f_all$conf.int[2]),
"method" =
c(f_pos$method, f_neg$method, f_all$method),
"confidence_level" =
c(f_pos$conf.level, f_neg$conf.level, f_all$conf.level),
"alternative" = c(f_pos$alternative, f_neg$alternative, f_all$alternative))
gt::gt(f_tbl) %>% gt::tab_header(paste0("error rates for ",
select_analyte)) %>%
gt::fmt_number(columns = 2:4, n_sigfig = 3)
}
table_false("Sr-90", example_df)
#' @param df data frame with all data needed as described in `get_data`.
#'
#' @examples
#' example_spike_data <- system.file('extdata', 'spikevals.csv', package = 'blindspiker')
#' example_lab_data <- system.file('extdata', 'labvals.csv', package = 'blindspiker')
#' example_df <- get_data(spike_data = example_spike_data, lab_data = example_lab_data)
#' table_false(df = example_df)
#'
#' @export
#'
table_false <- function(select_analyte,
df = bs_df) {
df <- example_df %>% dplyr::filter(analyte == select_analyte)
# false postive
# The false positive rate is computed as the number of false positives divided
# by the number of false positives and true negatives. True negatives are
# computed first
n_true_neg <- df %>%
dplyr::filter(analyte == select_analyte) %>%
dplyr::filter(err_type == "no_err_cat") %>%
dplyr::filter(result < det_lvl) %>%
dplyr::count(.) %>%
as.numeric()  #
n_false_neg <- df %>%
dplyr::filter(analyte == select_analyte) %>%
dplyr::filter(err_type == "false_neg") %>%
dplyr::count(.) %>%
as.numeric()  #
n_false_pos <-  df %>%
dplyr::filter(analyte == select_analyte) %>%
dplyr::filter(err_type == "false_pos") %>%
dplyr::count(.) %>%
as.numeric()
n_lab_results <- df %>%
dplyr::filter(analyte == select_analyte) %>%
dplyr::filter(!is.na(result)) %>%
dplyr::count(.) %>%
as.numeric()
n_err_free <-  df %>%
dplyr::filter(analyte == select_analyte) %>%
dplyr::filter(!is.na(result)) %>%
dplyr::filter(err_type == "no_err_cat") %>%
dplyr::count(.) %>%
as.numeric()
# false positive rate
f_pos <-
binGroup::binCI(
n = n_false_pos + n_true_neg,
y = n_false_pos,
conf.level = 0.95,
alternative = "two.sided",
method = "CP")
# false negative rate
f_neg <-
binGroup::binCI(
n = length(df$sample_ID),
y = n_false_neg,
conf.level = 0.95,
alternative = "two.sided",
method = "CP")
# total error rate
f_all <- binGroup::binCI(n = n_lab_results,
y = n_lab_results - n_err_free, #either error
conf.level = 0.95,
alternative = "two.sided",
method = "CP")
f_tbl <- data.frame("error_type" =
c("false postive", "false negative", "either_error"),
"n" = c(n_false_pos, n_false_neg, n_false_neg + n_false_pos),
"low" =
c(f_pos$conf.int[1], f_neg$conf.int[1], f_all$conf.int[1]),
"rate_est" =
c(f_pos$estimate, f_neg$estimate, f_all$estimate),
"high" =
c(f_pos$conf.int[2], f_neg$conf.int[2], f_all$conf.int[2]),
"method" =
c(f_pos$method, f_neg$method, f_all$method),
"conf_level" =
c(f_pos$conf.level, f_neg$conf.level, f_all$conf.level),
"alternative" = c(f_pos$alternative, f_neg$alternative, f_all$alternative))
gt::gt(f_tbl) %>% gt::tab_header(paste0("error rates for ",
select_analyte)) %>%
gt::fmt_number(columns = c(2, 4, 5), n_sigfig = 3)
}
table_false("Sr-90", example_df)
#' @param df data frame with all data needed as described in `get_data`.
#'
#' @examples
#' example_spike_data <- system.file('extdata', 'spikevals.csv', package = 'blindspiker')
#' example_lab_data <- system.file('extdata', 'labvals.csv', package = 'blindspiker')
#' example_df <- get_data(spike_data = example_spike_data, lab_data = example_lab_data)
#' table_false(df = example_df)
#'
#' @export
#'
table_false <- function(select_analyte,
df = bs_df) {
df <- example_df %>% dplyr::filter(analyte == select_analyte)
# false postive
# The false positive rate is computed as the number of false positives divided
# by the number of false positives and true negatives. True negatives are
# computed first
n_true_neg <- df %>%
dplyr::filter(analyte == select_analyte) %>%
dplyr::filter(err_type == "no_err_cat") %>%
dplyr::filter(result < det_lvl) %>%
dplyr::count(.) %>%
as.numeric()  #
n_false_neg <- df %>%
dplyr::filter(analyte == select_analyte) %>%
dplyr::filter(err_type == "false_neg") %>%
dplyr::count(.) %>%
as.numeric()  #
n_false_pos <-  df %>%
dplyr::filter(analyte == select_analyte) %>%
dplyr::filter(err_type == "false_pos") %>%
dplyr::count(.) %>%
as.numeric()
n_lab_results <- df %>%
dplyr::filter(analyte == select_analyte) %>%
dplyr::filter(!is.na(result)) %>%
dplyr::count(.) %>%
as.numeric()
n_err_free <-  df %>%
dplyr::filter(analyte == select_analyte) %>%
dplyr::filter(!is.na(result)) %>%
dplyr::filter(err_type == "no_err_cat") %>%
dplyr::count(.) %>%
as.numeric()
# false positive rate
f_pos <-
binGroup::binCI(
n = n_false_pos + n_true_neg,
y = n_false_pos,
conf.level = 0.95,
alternative = "two.sided",
method = "CP")
# false negative rate
f_neg <-
binGroup::binCI(
n = length(df$sample_ID),
y = n_false_neg,
conf.level = 0.95,
alternative = "two.sided",
method = "CP")
# total error rate
f_all <- binGroup::binCI(n = n_lab_results,
y = n_lab_results - n_err_free, #either error
conf.level = 0.95,
alternative = "two.sided",
method = "CP")
f_tbl <- data.frame("error_type" =
c("false postive", "false negative", "either_error"),
"n" = c(n_false_pos, n_false_neg, n_false_neg + n_false_pos),
"low" =
c(f_pos$conf.int[1], f_neg$conf.int[1], f_all$conf.int[1]),
"rate_est" =
c(f_pos$estimate, f_neg$estimate, f_all$estimate),
"high" =
c(f_pos$conf.int[2], f_neg$conf.int[2], f_all$conf.int[2]),
"method" =
c(f_pos$method, f_neg$method, f_all$method),
"conf_level" =
c(f_pos$conf.level, f_neg$conf.level, f_all$conf.level),
"alternative" = c(f_pos$alternative, f_neg$alternative, f_all$alternative))
gt::gt(f_tbl) %>% gt::tab_header(paste0("error rates for ",
select_analyte)) %>%
gt::fmt_number(columns = c(3:5), n_sigfig = 3)
}
table_false("unknownium", example_df)
#' @param df data frame with all data needed as described in `get_data`.
#'
#' @examples
#' example_spike_data <- system.file('extdata', 'spikevals.csv', package = 'blindspiker')
#' example_lab_data <- system.file('extdata', 'labvals.csv', package = 'blindspiker')
#' example_df <- get_data(spike_data = example_spike_data, lab_data = example_lab_data)
#' table_false(df = example_df)
#'
#' @export
#'
table_false <- function(select_analyte,
df = bs_df) {
df <- example_df %>% dplyr::filter(analyte == select_analyte)
# false postive
# The false positive rate is computed as the number of false positives divided
# by the number of false positives and true negatives. True negatives are
# computed first
n_true_neg <- df %>%
dplyr::filter(analyte == select_analyte) %>%
dplyr::filter(err_type == "no_err_cat") %>%
dplyr::filter(result < det_lvl) %>%
dplyr::count(.) %>%
as.numeric()  #
n_false_neg <- df %>%
dplyr::filter(analyte == select_analyte) %>%
dplyr::filter(err_type == "false_neg") %>%
dplyr::count(.) %>%
as.numeric()  #
n_false_pos <-  df %>%
dplyr::filter(analyte == select_analyte) %>%
dplyr::filter(err_type == "false_pos") %>%
dplyr::count(.) %>%
as.numeric()
n_lab_results <- df %>%
dplyr::filter(analyte == select_analyte) %>%
dplyr::filter(!is.na(result)) %>%
dplyr::count(.) %>%
as.numeric()
n_err_free <-  df %>%
dplyr::filter(analyte == select_analyte) %>%
dplyr::filter(!is.na(result)) %>%
dplyr::filter(err_type == "no_err_cat") %>%
dplyr::count(.) %>%
as.numeric()
# false positive rate
f_pos <-
binGroup::binCI(
n = n_false_pos + n_true_neg,
y = n_false_pos,
conf.level = 0.95,
alternative = "two.sided",
method = "CP")
# false negative rate
f_neg <-
binGroup::binCI(
n = length(df$sample_ID),
y = n_false_neg,
conf.level = 0.95,
alternative = "two.sided",
method = "CP")
# total error rate
f_all <- binGroup::binCI(n = n_lab_results,
y = n_lab_results - n_err_free, #either error
conf.level = 0.95,
alternative = "two.sided",
method = "CP")
f_tbl <- data.frame("error_type" =
c("false postive", "false negative", "either_error"),
"n" = c(n_false_pos, n_false_neg, n_false_neg + n_false_pos),
"min" =
c(f_pos$conf.int[1], f_neg$conf.int[1], f_all$conf.int[1]),
"mean" =
c(f_pos$estimate, f_neg$estimate, f_all$estimate),
"max" =
c(f_pos$conf.int[2], f_neg$conf.int[2], f_all$conf.int[2]),
"method" =
c(f_pos$method, f_neg$method, f_all$method),
"conf_level" =
c(f_pos$conf.level, f_neg$conf.level, f_all$conf.level),
"alternative" = c(f_pos$alternative, f_neg$alternative, f_all$alternative))
gt::gt(f_tbl) %>% gt::tab_header(paste0("error rates for ",
select_analyte)) %>%
gt::fmt_number(columns = c(3:5), n_sigfig = 3)
}
table_false("asphodel", example_df)
devtools::document()
devtools::document()
roxygen2::roxygenise()
devtools::spell_check()
devtools::document()
roxygen2::roxygenise()
example_spike_data <- "C:/R_files/blindspiker/inst/extdata/spikevals.csv"
example_lab_data <- "C:/R_files/blindspiker/inst/extdata/labvals.csv"
# bad ones
example_df <- get_data(spike_data = example_spike_data,
lab_data = bad_lab_data)
# good ones
example_df <- get_data(spike_data = example_spike_data,
lab_data = example_lab_data)
plot_run <- function(select_analyte,
dat = bs_df,
version = "ratio",
matrix = "sample",
log = "n")
{
# If matrix option is changed, but 'original' is misspelled or missing,
# change to 'original'
if(!version %in% c("ratio", "original"))
version <- "original"
if(version == "original"){
df2 <- dat %>%
# keep only spiked values
dplyr::filter(analyte == select_analyte)
unit_txt <- df2$units[1]
# remove results = 0
if(length(df2$sample_ID[df2$result <= 0]) > 0) {
cat("Removing results <= 0 for the following samples, \n")
print.data.frame(data.frame("sample_ID" = df2$sample_ID[df2$result <= 0]))
}
df2 <- df2 %>%
dplyr::filter(result > 0) %>%
dplyr::mutate(
low_res = result - unc * 2 / k) %>%
dplyr::mutate(
high_res = result + unc * 2 / k) %>%
dplyr::mutate(spike_overlap =
as.factor(
dplyr::case_when(low_res > spike_value ~ 1,
high_res < spike_value ~1,
TRUE ~ 0)))
df2 <- df2[order(df2$result_date), ]
date_range <- (range(df2$result_date))
p <- ggplot2::ggplot(data = df2,
ggplot2::aes(sample_ID,
result,
color = spike_overlap)) +
ggplot2::geom_point(shape = 1) +
ggplot2::geom_linerange(data = df2,
ggplot2::aes(x= sample_ID,
ymin = low_res,
ymax = high_res,
color = spike_overlap),
linewidth = 0.5,
show.legend = FALSE) +
ggplot2::geom_point(ggplot2::aes(sample_ID, spike_value),
shape = 3,
size = 0.8,
color = "darksalmon") +
ggplot2::scale_color_manual(values =  c("black", "red")) +
ggplot2::xlab("results in report date order") +
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
legend.position = "none") +
ggplot2::ylab(paste0("result, ", unit_txt)) +
ggplot2::ggtitle(paste0("run plot for ", select_analyte)) +
ggplot2::labs(caption = paste0("result date range ", date_range[1],
" to ", date_range[2]))
if(log == "y") p <- p + ggplot2::scale_y_log10()
p
}
# ratio version -----------------------------------------------------------
if(version == "ratio"){
df <- dat %>%
# keep only spiked values
dplyr::filter(analyte == select_analyte) %>%
dplyr::filter(spike_value > 0)
unit_txt <- df$units[1]
# remove results = 0
if(length(df$sample_ID[df$result <= 0]) > 0) {
cat("Removing results <= 0 for the following samples, \n")
print.data.frame(data.frame("sample_ID" = df$sample_ID[df$result <= 0]))
}
df <- df %>%
dplyr::filter(result > 0) %>%
dplyr::mutate(res_to_spike_ratio = result/spike_value) %>%
dplyr::mutate(
low_rat = res_to_spike_ratio - unc * 2 / k / result) %>%
dplyr::mutate(
up_rat = res_to_spike_ratio + unc * 2 / k / result) %>%
dplyr::mutate(spike_overlap =
as.factor(
dplyr::case_when(up_rat < 1 ~ 1,
low_rat > 1 ~1,
TRUE ~ 0)
)
)
print.data.frame(df)
df$low_rat[is.nan(df$lower)] <- 0
df$up_rat[is.nan(df$upper)] <- 0
df <- df[order(df$result_date), ]
date_range <- (range(df$result_date))
p <- ggplot2::ggplot(data = df,
ggplot2::aes(sample_ID,
res_to_spike_ratio,
color = spike_overlap)) +
ggplot2::geom_point(shape = 1) +
ggplot2::geom_linerange(ggplot2::aes(x = sample_ID,
ymin = low_rat,
ymax = up_rat,
color = spike_overlap),
linewidth = 0.5,
show.legend = FALSE) +
ggplot2::scale_color_manual(values =  c("black", "red")) +
ggplot2::geom_hline(yintercept = 1,
color = "darksalmon",
linetype = 2) +
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
legend.position = "none")  +
ggplot2::xlab("results in report date order") +
ggplot2::ylab(paste0(select_analyte, " result / spike value")) +
ggplot2::ggtitle(paste0(select_analyte, " result / spike")) +
ggplot2::labs(caption = paste0("result date range ", date_range[1],
" to ", date_range[2]))
if(log == "y") p <- p + ggplot2::scale_y_log10()
p
}
p
}
plot_run("asphodel", example_df)
plot_run("unknownium", example_df)
plot_run("unknownium", example_df, log = "y")
plot_run("Sr-90", example_df)
devtools::document()
roxygen2::roxygenise()
devtools::spell_check()
library(blindspiker)
?read.csv
?complete.cases
devtools::document()
roxygen2::roxygenise()
library(blindspiker)
?read.csv
devtools::document()
devtools::document()
roxygen2::roxygenise()
devtools::document()
devtools::document()
roxygen2::roxygenise()
library(blindspiker)
devtools::document()
roxygen2::roxygenise()
devtools::document()
roxygen2::roxygenise()
library(blindspiker)
devtools::document()
roxygen2::roxygenise()
library(blindspiker)
devtools::document()
roxygen2::roxygenise()
devtools::document()
roxygen2::roxygenise()
