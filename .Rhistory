df$TAT <- as.numeric(df$Result - df$dtmReceiveDate)
if(any(is.na(df$TAT))){
broken <- df %>% dplyr::filter(is.na(df$TAT)) %>%
dplyr::select(SAMPLE_ID)
cat(paste0("ID's with date not being read: ", broken))
df <- dplyr::filter(df[-which(df$SAMPLE_ID == broken), ])
}
df <- readr::read_tsv(compiled_data)
# identify the same date range to be used for all plots in a report
xlims <- range(c(df$Result, df$dtmReceiveDate))
df <- df %>% dplyr::filter(ISOTOPE == isotope & SPIKED_VALUE != 0)
df$TAT <- as.numeric(df$Result - df$dtmReceiveDate)
if(any(is.na(df$TAT))){
broken <- df %>% dplyr::filter(is.na(df$TAT)) %>%
dplyr::select(SAMPLE_ID)
cat(paste0("ID's with date not being read: ", broken))
df <- dplyr::filter(df[which(df$SAMPLE_ID != broken), ])
}
df <- df %>% dplyr::filter(ISOTOPE == isotope & SPIKED_VALUE != 0)
df <- readr::read_tsv(compiled_data)
# identify the same date range to be used for all plots in a report
xlims <- range(c(df$Result, df$dtmReceiveDate))
df <- df %>% dplyr::filter(ISOTOPE == isotope & SPIKED_VALUE != 0)
df$TAT <- as.numeric(df$Result - df$dtmReceiveDate)
if(any(is.na(df$TAT))){
broken <- df %>% dplyr::filter(is.na(df$TAT)) %>%
dplyr::select(SAMPLE_ID)
cat(paste0("ID's with date not being read: ", broken))
df <- df %>% dplyr::filter(SAMPLE_ID != broken)
}
df <- readr::read_tsv(compiled_data)
# identify the same date range to be used for all plots in a report
xlims <- range(c(df$Result, df$dtmReceiveDate))
df <- df %>% dplyr::filter(ISOTOPE == isotope & SPIKED_VALUE != 0)
df$TAT <- as.numeric(df$Result - df$dtmReceiveDate)
if(any(is.na(df$TAT))){
broken <- df %>% dplyr::filter(is.na(df$TAT)) %>%
dplyr::select(SAMPLE_ID)
cat(paste0("ID's with date not being read: ", broken))
df <- df %>% dplyr::filter(SAMPLE_ID != broken)
}
if(any(is.na(df$TAT))){
broken <- df %>% dplyr::filter(is.na(df$TAT)) %>%
dplyr::select(SAMPLE_ID)
cat(paste0("ID's with date not being read: ", broken))
df <- df %>% dplyr::filter(SAMPLE_ID != broken)
df
}
View(df)
?filter
View(broken)
str(df)
str(broken)
broken <- df %>% dplyr::filter(is.na(df$TAT)) %>%
as.numeric(dplyr::select(SAMPLE_ID))
df <- readr::read_tsv(compiled_data)
# identify the same date range to be used for all plots in a report
xlims <- range(c(df$Result, df$dtmReceiveDate))
df <- df %>% dplyr::filter(ISOTOPE == isotope & SPIKED_VALUE != 0)
df$TAT <- as.numeric(df$Result - df$dtmReceiveDate)
if(any(is.na(df$TAT))){
broken <- df %>% dplyr::filter(is.na(df$TAT)) %>%
as.numeric(dplyr::select(SAMPLE_ID))
cat(paste0("ID's with date not being read: ", broken))
df <- df %>% dplyr::filter(SAMPLE_ID != broken)
df
}
broken <- df %>% dplyr::filter(is.na(df$TAT)) %>%
dplyr::select(SAMPLE_ID) %>% as.numeric(.)
df <- readr::read_tsv(compiled_data)
# identify the same date range to be used for all plots in a report
xlims <- range(c(df$Result, df$dtmReceiveDate))
df <- df %>% dplyr::filter(ISOTOPE == isotope & SPIKED_VALUE != 0)
df$TAT <- as.numeric(df$Result - df$dtmReceiveDate)
if(any(is.na(df$TAT))){
broken <- df %>% dplyr::filter(is.na(df$TAT)) %>%
dplyr::select(SAMPLE_ID) %>% as.numeric(.)
cat(paste0("ID's with date not being read: ", broken))
df <- df %>% dplyr::filter(SAMPLE_ID != broken)
df
}
df <- readr::read_tsv(compiled_data)
# identify the same date range to be used for all plots in a report
xlims <- range(c(df$Result, df$dtmReceiveDate))
df <- df %>% dplyr::filter(ISOTOPE == isotope & SPIKED_VALUE != 0)
df$TAT <- as.numeric(df$Result - df$dtmReceiveDate)
if(any(is.na(df$TAT))){
broken <- df %>% dplyr::filter(is.na(df$TAT)) %>%
dplyr::select(SAMPLE_ID) %>% as.numeric(.)
cat(paste0("ID's with date not being read: ", broken))
df <- df %>% dplyr::filter(SAMPLE_ID != broken)
}
if(any(is.na(df$TAT))){
broken <- df %>% dplyr::filter(df$TAT<0) %>%
dplyr::select(SAMPLE_ID) %>% as.numeric(.)
cat(paste0("ID's with negative TAT's: ", broken))
df <- df %>% dplyr::filter(SAMPLE_ID != broken)
}
df$late <- df$TAT > target_days
lates <- sum(df$late)
late_pct <- 100 * lates / length(df$TAT)
ggplot2::ggplot(df, ggplot2::aes(dtmReceiveDate, TAT, color = late)) +
ggplot2::scale_colour_manual(values = c( "black", "red")) +
ggplot2::xlim(xlims) +
ggplot2::geom_point(shape = 1) +
ggplot2::geom_segment(ggplot2::aes(xend = dtmReceiveDate, yend = 0)) +
ggplot2::xlab("receipt date") +
ggplot2::ylab("turnaround, days") +
ggplot2::ggtitle(paste0("Percent ", isotope, " > ", target_days, " days = ",
signif(late_pct, 3), "%"),
subtitle = paste0("Number ", isotope, " > ", target_days, " days = ", signif(lates, 3)))
broken <- df %>% dplyr::filter(df$TAT<0) %>%
dplyr::select(SAMPLE_ID) %>% as.numeric(.)
cat(paste0("ID's with negative TAT's: ", broken))
df <- df %>% dplyr::filter(SAMPLE_ID != broken)
df <- readr::read_tsv(compiled_data)
# identify the same date range to be used for all plots in a report
xlims <- range(c(df$Result, df$dtmReceiveDate))
df <- df %>% dplyr::filter(ISOTOPE == isotope & SPIKED_VALUE != 0)
df$TAT <- as.numeric(df$Result - df$dtmReceiveDate)
if(any(is.na(df$TAT))){
broken <- df %>% dplyr::filter(is.na(df$TAT)) %>%
dplyr::select(SAMPLE_ID) %>% as.numeric(.)
cat(paste0("ID's with date not being read: ", broken))
df <- df %>% dplyr::filter(SAMPLE_ID != broken)
}
if(any(is.na(df$TAT))){
broken <- df %>% dplyr::filter(df$TAT<0) %>%
dplyr::select(SAMPLE_ID) %>% as.numeric(.)
cat(paste0("ID's with negative TAT's: ", broken))
df <- df %>% dplyr::filter(SAMPLE_ID != broken)
}
df$late <- df$TAT > target_days
lates <- sum(df$late)
late_pct <- 100 * lates / length(df$TAT)
ggplot2::ggplot(df, ggplot2::aes(dtmReceiveDate, TAT, color = late)) +
ggplot2::scale_colour_manual(values = c( "black", "red")) +
ggplot2::xlim(xlims) +
ggplot2::geom_point(shape = 1) +
ggplot2::geom_segment(ggplot2::aes(xend = dtmReceiveDate, yend = 0)) +
ggplot2::xlab("receipt date") +
ggplot2::ylab("turnaround, days") +
ggplot2::ggtitle(paste0("Percent ", isotope, " > ", target_days, " days = ",
signif(late_pct, 3), "%"),
subtitle = paste0("Number ", isotope, " > ", target_days, " days = ", signif(lates, 3)))
View(df)
broken <- df %>% dplyr::filter(df$TAT<0) %>%
dplyr::select(SAMPLE_ID) %>% as.numeric(.)
cat(paste0("ID's with negative TAT's: ", broken))
df <- df %>% dplyr::filter(SAMPLE_ID != broken)
df$late <- df$TAT > target_days
lates <- sum(df$late)
late_pct <- 100 * lates / length(df$TAT)
ggplot2::ggplot(df, ggplot2::aes(dtmReceiveDate, TAT, color = late)) +
ggplot2::scale_colour_manual(values = c( "black", "red")) +
ggplot2::xlim(xlims) +
ggplot2::geom_point(shape = 1) +
ggplot2::geom_segment(ggplot2::aes(xend = dtmReceiveDate, yend = 0)) +
ggplot2::xlab("receipt date") +
ggplot2::ylab("turnaround, days") +
ggplot2::ggtitle(paste0("Percent ", isotope, " > ", target_days, " days = ",
signif(late_pct, 3), "%"),
subtitle = paste0("Number ", isotope, " > ", target_days, " days = ", signif(lates, 3)))
df <- readr::read_tsv(compiled_data)
# identify the same date range to be used for all plots in a report
xlims <- range(c(df$Result, df$dtmReceiveDate))
df <- df %>% dplyr::filter(ISOTOPE == isotope & SPIKED_VALUE != 0)
df$TAT <- as.numeric(df$Result - df$dtmReceiveDate)
if(any(is.na(df$TAT))){
broken <- df %>% dplyr::filter(is.na(df$TAT)) %>%
dplyr::select(SAMPLE_ID) %>% as.numeric(.)
cat(paste0("ID's with date not being read: ", broken))
df <- df %>% dplyr::filter(SAMPLE_ID != broken)
}
if(any(df$TAT<0)){
broken <- df %>% dplyr::filter(df$TAT<0) %>%
dplyr::select(SAMPLE_ID) %>% as.numeric(.)
cat(paste0("ID's with negative TAT's: ", broken))
df <- df %>% dplyr::filter(SAMPLE_ID != broken)
}
df$late <- df$TAT > target_days
lates <- sum(df$late)
late_pct <- 100 * lates / length(df$TAT)
ggplot2::ggplot(df, ggplot2::aes(dtmReceiveDate, TAT, color = late)) +
ggplot2::scale_colour_manual(values = c( "black", "red")) +
ggplot2::xlim(xlims) +
ggplot2::geom_point(shape = 1) +
ggplot2::geom_segment(ggplot2::aes(xend = dtmReceiveDate, yend = 0)) +
ggplot2::xlab("receipt date") +
ggplot2::ylab("turnaround, days") +
ggplot2::ggtitle(paste0("Percent ", isotope, " > ", target_days, " days = ",
signif(late_pct, 3), "%"),
subtitle = paste0("Number ", isotope, " > ", target_days, " days = ", signif(lates, 3)))
#' @param my_dir directory where data files are stored in format "C:/my_data_loc/".
#' Note the forward slashes.
#'
#' @param compiled_data Data compiled with blindspiker::get_data.R. Defaults to "df.tsv"
#'
#' @param isotope What is being analyzed
#'
#' @param target_days The target turnaround time in days
#'
#' @export
plot_tat <- function(my_dir, compiled_data = "df.tsv", isotope, target_days) {
# to avoid note error on ggplot args
ACTIVITY <-  `Am-241` <-  ISOTOPE <-  `Np-237` <-  `Pu-238` <- `Pu-239` <- `SAMPLE_ID` <-  `SPIKED_VALUE` <-
`Sample` <- dtmReceiveDate <- Received <- TAT <- late <- NULL
compiled_data <- paste0(my_dir, "/", compiled_data)
df <- readr::read_tsv(compiled_data)
# identify the same date range to be used for all plots in a report
xlims <- range(c(df$Result, df$dtmReceiveDate))
df <- df %>% dplyr::filter(ISOTOPE == isotope & SPIKED_VALUE != 0)
df$TAT <- as.numeric(df$Result - df$dtmReceiveDate)
# df[which(df$TAT<0),] #troubleshooting
if(any(is.na(df$TAT))){
broken <- df %>% dplyr::filter(is.na(df$TAT)) %>%
dplyr::select(SAMPLE_ID) %>% as.numeric(.)
cat(paste0("ID's with date not being read: ", broken))
df <- df %>% dplyr::filter(SAMPLE_ID != broken)
}
if(any(df$TAT<0)){
broken <- df %>% dplyr::filter(df$TAT<0) %>%
dplyr::select(SAMPLE_ID) %>% as.numeric(.)
cat(paste0("ID's with negative TAT's: ", broken))
df <- df %>% dplyr::filter(SAMPLE_ID != broken)
}
df$late <- df$TAT > target_days
lates <- sum(df$late)
late_pct <- 100 * lates / length(df$TAT)
# troubleshooting
# readr::write_tsv(df, "ts.tsv")
ggplot2::ggplot(df, ggplot2::aes(dtmReceiveDate, TAT, color = late)) +
ggplot2::scale_colour_manual(values = c( "black", "red")) +
ggplot2::xlim(xlims) +
ggplot2::geom_point(shape = 1) +
ggplot2::geom_segment(ggplot2::aes(xend = dtmReceiveDate, yend = 0)) +
ggplot2::xlab("receipt date") +
ggplot2::ylab("turnaround, days") +
ggplot2::ggtitle(paste0("Percent ", isotope, " > ", target_days, " days = ",
signif(late_pct, 3), "%"),
subtitle = paste0("Number ", isotope, " > ", target_days, " days = ", signif(lates, 3)))
}
roxygenise()
setwd("T:/mark/jobs/mgh282_blind_spike_R/blindspiker")
roxygenise()
library(blindspiker)
# to avoid note error on ggplot args
ACTIVITY <-  `Am-241` <-  ISOTOPE <-  `Np-237` <-  `Pu-238` <- `Pu-239` <- `SAMPLE_ID` <-  `SPIKED_VALUE` <-
`Sample` <- dtmReceiveDate <- Received <- TAT <- late <- `.` <- NULL
# testing get_data.R
my_dir <- "T:/mark/jobs/mgh282_blind_spike_R/BSR_2018_2019"
spikeval <- "Spiked Values.xlsx"
lab_results <- "Blind Spike Result Report Jan 2018 through Dec 2019.xlsx"
received_dates <- "EBL Received Dates.xlsx"
isotope <- "Am-241"
roxygenise()
library(blindspiker)
?ggplot2::geom_point
# testing get_data.R
my_dir <- "T:/mark/jobs/mgh282_blind_spike_R/BSR_2018_2019"
spikeval <- "Spiked Values.xlsx"
lab_results <- "Blind Spike Result Report Jan 2018 through Dec 2019.xlsx"
received_dates <- "EBL Received Dates.xlsx"
library(blindspiker)
# get_data ----------------------------------------------------------------
get_data(my_dir = "T:/mark/jobs/mgh282_blind_spike_R/BSR_2018_2019",
spikeval = "Spiked Values.xlsx",
lab_results = "Blind Spike Result Report Jan 2018 through Dec 2019.xlsx",
received_dates = "EBL Received Dates.xlsx")
isotope <- "Am-241"
df <- readr::read_tsv(compiled_data)
# identify the same date range to be used for all plots in a report
xlims <- range(c(df$Result, df$dtmReceiveDate))
df <- df %>% dplyr::filter(ISOTOPE == isotope & SPIKED_VALUE != 0)
df <- df[order(df$SAMPLE_ID), ]
# compute CI before pivot
CI <- binGroup::binCI(n = length(df$SAMPLE_ID),
y = length(df$SAMPLE_ID[which(df$err_type == "false_neg")]),
conf.level = 0.95,
alternative = "two.sided",
method = "CP")$conf.int
CI <- paste0("(", signif(CI[1], 3), ", ", signif(CI[2], 3), ")")
f.neg <- length(df$SAMPLE_ID[which(df$err_type == "false_neg")]) / length(df$SAMPLE_ID)
df <- df %>% tidyr::pivot_longer(cols = c("ACTIVITY", "DET_LEVEL"),
names_to = "measure",
values_to = "value")
ggplot2::ggplot(df, ggplot2::aes(dtmReceiveDate, value,
color = err_type)) +
ggplot2::xlab("receipt date") +
ggplot2::scale_x_date(date_labels =  "%Y-%m") +
ggplot2::scale_colour_manual(values = c("red", "black")) +
ggplot2::scale_shape_manual(values = c(1, 2)) +
ggplot2::geom_point(size = 1) +
ggplot2::geom_point(ggplot2::aes(shape = err_type), size = 1.5) +
ggplot2::geom_hline(yintercept = 0.05, color = "black", linetype = 2, size = 0.5) +
ggplot2::ylab(paste0(isotope, " in Urine (dpm/L)")) +
ggplot2::ggtitle(paste0("False Negative Rate for ", isotope, " = ", signif(f.neg, 3)),
subtitle = paste0("95% CI = ", CI)) +
ggplot2::facet_grid(rows = ggplot2::vars(measure))
ggplot2::ggplot(df, ggplot2::aes(dtmReceiveDate, value,
color = err_type)) +
ggplot2::xlab("receipt date") +
ggplot2::scale_x_date(date_labels =  "%Y-%m") +
ggplot2::scale_colour_manual(values = c("red", "black")) +
ggplot2::scale_shape_manual(values = c(1, 2)) +
ggplot2::geom_point(size = 1) +
ggplot2::geom_point(ggplot2::aes(shape = err_type), size = 1.5, alpha = 0.7) +
ggplot2::geom_hline(yintercept = 0.05, color = "black", linetype = 2, size = 0.5) +
ggplot2::ylab(paste0(isotope, " in Urine (dpm/L)")) +
ggplot2::ggtitle(paste0("False Negative Rate for ", isotope, " = ", signif(f.neg, 3)),
subtitle = paste0("95% CI = ", CI)) +
ggplot2::facet_grid(rows = ggplot2::vars(measure))
library(blindspiker)
library(blindspiker)
install.packages("roxygen2")
roxygen2::roxygenise()
library(formatR)
?formatR
??formatR
tidy_dir("T:/mark/jobs/mgh282_blind_spike_R/blindspiker/R")
tidy_file("T:/mark/jobs/mgh282_blind_spike_R/blindspiker/R/bs_analytes.R")
tidy_file("T:/mark/jobs/mgh282_blind_spike_R/blindspiker/R/bs_analytes.R", width.cutoff = 60)
tidy_dir("T:/mark/jobs/mgh282_blind_spike_R/blindspiker/R", width.cutoff = 60)
plot_cc <- function(my_dir, compiled_data = "df.tsv", isotope) {
# to avoid note on no visible bindings
ACTIVITY <- `Am-241` <- ISOTOPE <- `Np-237` <- `Pu-238` <- `Pu-239` <- SAMPLE_ID <- SPIKED_VALUE <- Sample <- dtmReceiveDate <- NULL
compiled_data <- paste0(my_dir, "/", compiled_data)
df <- readr::read_tsv(compiled_data)
# identify the same date range to be used for all plots in a
# report
xlims <- range(c(df$Result, df$dtmReceiveDate))
df <- df %>%
dplyr::filter(ISOTOPE == isotope & SPIKED_VALUE != 0)
df <- df[order(df$SAMPLE_ID), ]
# df$Sample <- 1:length(df$SAMPLE_ID)
# f.pos is the fraction of results > spiked
f.pos <- sum(df$ACTIVITY > df$SPIKED_VALUE)/length(df$SAMPLE_ID)
CI <- binGroup::binCI(n = length(df$SAMPLE_ID), y = sum(df$ACTIVITY >
df$SPIKED_VALUE), conf.level = 0.95, alternative = "two.sided",
method = "CP")$conf.int
CI <- paste0("(", signif(CI[1] * 100, 3),
", ", signif(CI[2] * 100, 3),")")
m <- mean(df$ACTIVITY)
sd2 <- 2 * stats::sd(df$ACTIVITY)
ggplot2::ggplot(df, ggplot2::aes(dtmReceiveDate, ACTIVITY)) +
ggplot2::geom_point() +
ggplot2::geom_line() +
ggplot2::xlab("receipt date") +
ggplot2::scale_x_date(date_labels = "%Y-%m") +
ggplot2::ylab(paste0(isotope,
" in urine (dpm/L)")) +
ggplot2::geom_hline(yintercept = m,
color = "black", linetype = 2, size = 0.5) +
ggplot2::geom_hline(yintercept = 0.05,
color = "blue", linetype = 3, size = 0.5) +
#       ggplot2::geom_hline(yintercept = m +
#      sd2, color = "red", linetype = 1, size = 0.5) +
#        ggplot2::geom_hline(yintercept = m -
#        sd2, color = "red", linetype = 1, size = 0.5) +
ggplot2::ggtitle(paste0(isotope, " % blind spikes above target: ",
signif(f.pos * 100, 3)), subtitle = paste0("95% CI = ",
CI))
}
library(roxygen2)
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygen2::roxygenise()
?usethis
library(usethis)
use_vignette("Using-blindspiker")
install.packages("whisker")
use_vignette("Using-blindspiker")
use_vignette("Using-blindspiker")
usethis::use_vignette("Using-blindspiker", "Using blindspiker")
usethis::use_vignette("Using-blindspiker", "Using blindspiker")
roxygen2::roxygenize()
library(usethis)
usethis::use_vignette("Using-blindspiker", "Using blindspiker")
roxygen2::roxygenize()
3/16 / 2 * 2.54
3/16 / 2 * 2.54 + c(-11.24,    11.24,    -13.125, 13.125,   -0.01, 30.48)
(1 + 3/16 / 2) * 2.54 + c(-11.24,    11.24,    -13.125, 13.125,   -0.01, 30.48)
devtools::build_vignette()
devtools::build_vignettes()
devtools::build_vignettes()
.Last.error.trace
devtools::install_github(build_vignettes = TRUE)
devtools::build()
roxygen2::roxygenize()
devtools::build_vignettes()
devtools::build()
devtools::build_vignettes()
.Last.error.trace
devtools::build_vignettes(pkg = "T:/mark/jobs/mgh282_blind_spike_R/blindspiker/blindspiker", )
devtools::build_vignettes(pkg = "T://mark/jobs/mgh282_blind_spike_R/blindspiker/blindspiker", )
devtools::build()
roxygen2::roxygenize()
roxygen2::roxygenize()
# package development library loads
library(devtools)
library(roxygen2)
library(usethis)
library(testthat)
library(pkgbuild)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools", "tidyverse", "radsafer")
install.packages("devtools", "tidyverse", "radsafer")
# package development library loads
library(devtools)
library(roxygen2)
library(usethis)
library(testthat)
library(pkgbuild)
install.packages("roxygen2")
install.packages("roxygen2")
library(roxygen2)
roxygen2::roxygenize()
devtools::build_vignettes()
devtools::build()
install("binGroup")
install.packages("binGroup")
install.packages(c(dplyr,
readxl,
readr,
magrittr,
binGroup,
ggplot2,
tidyr,
stats,
car,
rio,
utf8,
haven,
carData,
abind))
install.packages(c("dplyr",
"readxl",
"readr",
"magrittr",
"binGroup",
"ggplot2",
"tidyr",
"stats",
"car",
"rio",
"utf8",
"haven",
"carData",
"abind"))
install.packages(c("dplyr", "readxl", "readr", "magrittr", "binGroup", "ggplot2", "tidyr", "stats", "car", "rio", "utf8", "haven", "carData", "abind"))
install.packages(c("dplyr", "readxl", "readr", "magrittr", "binGroup", "ggplot2", "tidyr", "stats", "car", "rio", "utf8", "haven", "carData", "abind"))
install.packages(c("dplyr", "readxl", "readr", "magrittr", "binGroup", "ggplot2", "tidyr", "stats", "car", "rio", "utf8", "haven", "carData", "abind"))
install.packages(c("dplyr", "readxl", "readr", "magrittr", "binGroup", "ggplot2", "tidyr", "stats", "car", "rio", "utf8", "haven", "carData", "abind"))
roxygen2::roxygenize()
devtools::build_vignettes()
devtools::build()
install.packages(c("cli", "cpp11", "crayon", "curl", "data.table", "digest", "evaluate", "flextable", "gtable", "hms", "igraph", "isoband", "jsonlite", "knitr", "lifecycle", "markdown", "officer", "pillar", "purrr", "qpdf", "readr", "rlang", "rmarkdown", "scales", "scatterplot3d", "sys", "tibble", "tidyselect", "tinytex", "vctrs", "viridisLite", "vroom", "xfun", "yaml", "zip"))
install.packages(c("cli", "purrr", "readr", "rlang", "tibble", "vctrs", "xfun"))
install.packages(c("cli", "purrr", "readr", "rlang", "tibble", "vctrs", "xfun"))
install.packages(c("cli", "purrr", "readr", "rlang", "tibble", "vctrs", "xfun"))
install.packages(c("cli", "purrr", "readr", "rlang", "tibble", "vctrs", "xfun"))
install.packages(c("cli", "purrr", "readr", "rlang", "tibble", "vctrs", "xfun"))
install.packages(c("cli", "purrr", "readr", "rlang", "tibble", "vctrs", "xfun"))
install.packages(c("cli", "purrr", "readr", "rlang", "tibble", "vctrs", "xfun"))
install.packages("rlang")
?sample.int
binGroup::binCI
?qt
?binGroup::binCI
formatR::tidy_dir("T:/mark/R_work/blindspiker/R")
?formatR::tidy_dir
formatR::tidy_dir("T:/mark/R_work/blindspiker/R",  width.cutoff = 80)
# package development library loads
library(devtools)
install.packages("devtools")
library(roxygen2)
library(usethis)
library(testthat)
library(pkgbuild)
# workaround for Rtools not available for R version 3.5.1
# assignInNamespace("version_info", c(devtools:::version_info,
#       list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99",
#       path = "bin"))), "devtools")
pkgbuild::find_rtools() # is TRUE now
usethis::use_vignette("Using-blindspiker", "Using blindspiker")
roxygen2::roxygenize()
beepr::beep()
devtools::build()
# package development library loads
library(devtools)
library(roxygen2)
library(usethis)
library(testthat)
# workaround for Rtools not available for R version 3.5.1
# assignInNamespace("version_info", c(devtools:::version_info,
#       list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99",
#       path = "bin"))), "devtools")
pkgbuild::find_rtools() # is TRUE now
roxygen2::roxygenize()
roxygen2::roxygenize()
library(blindspiker)
roxygen2::roxygenize()
library(blindspiker)
install.packages(c('binGroup', 'car', 'rio', 'carData'))
library(blindspiker)
library(devtools)
library(roxygen2)
library(testthat)
library(usethis)
